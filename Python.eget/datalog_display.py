import smbus
import serial
import os
import time
import subprocess

BasicFont = [[0 for x in range(8)] for x in range(10)]
BasicFont = [[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
[0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00],
[0x00,0x00,0x07,0x00,0x07,0x00,0x00,0x00],
[0x00,0x14,0x7F,0x14,0x7F,0x14,0x00,0x00],
[0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00],
[0x00,0x23,0x13,0x08,0x64,0x62,0x00,0x00],
[0x00,0x36,0x49,0x55,0x22,0x50,0x00,0x00],
[0x00,0x00,0x05,0x03,0x00,0x00,0x00,0x00],
[0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00],
[0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00],
[0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00],
[0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00],
[0x00,0xA0,0x60,0x00,0x00,0x00,0x00,0x00],
[0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00],
[0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00],
[0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00],
[0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00],
[0x00,0x00,0x42,0x7F,0x40,0x00,0x00,0x00],
[0x00,0x62,0x51,0x49,0x49,0x46,0x00,0x00],
[0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00],
[0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x00],
[0x00,0x27,0x45,0x45,0x45,0x39,0x00,0x00],
[0x00,0x3C,0x4A,0x49,0x49,0x30,0x00,0x00],
[0x00,0x01,0x71,0x09,0x05,0x03,0x00,0x00],
[0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00],
[0x00,0x06,0x49,0x49,0x29,0x1E,0x00,0x00],
[0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00],
[0x00,0x00,0xAC,0x6C,0x00,0x00,0x00,0x00],
[0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00],
[0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00],
[0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00],
[0x00,0x02,0x01,0x51,0x09,0x06,0x00,0x00],
[0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x00],
[0x00,0x7E,0x09,0x09,0x09,0x7E,0x00,0x00],
[0x00,0x7F,0x49,0x49,0x49,0x36,0x00,0x00],
[0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00],
[0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x00],
[0x00,0x7F,0x49,0x49,0x49,0x41,0x00,0x00],
[0x00,0x7F,0x09,0x09,0x09,0x01,0x00,0x00],
[0x00,0x3E,0x41,0x41,0x51,0x72,0x00,0x00],
[0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00],
[0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00],
[0x00,0x20,0x40,0x41,0x3F,0x01,0x00,0x00],
[0x00,0x7F,0x08,0x14,0x22,0x41,0x00,0x00],
[0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x00],
[0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00],
[0x00,0x7F,0x04,0x08,0x10,0x7F,0x00,0x00],
[0x00,0x3E,0x41,0x41,0x41,0x3E,0x00,0x00],
[0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x00],
[0x00,0x3E,0x41,0x51,0x21,0x5E,0x00,0x00],
[0x00,0x7F,0x09,0x19,0x29,0x46,0x00,0x00],
[0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00],
[0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x00],
[0x00,0x3F,0x40,0x40,0x40,0x3F,0x00,0x00],
[0x00,0x1F,0x20,0x40,0x20,0x1F,0x00,0x00],
[0x00,0x3F,0x40,0x38,0x40,0x3F,0x00,0x00],
[0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00],
[0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00],
[0x00,0x61,0x51,0x49,0x45,0x43,0x00,0x00],
[0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00],
[0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00],
[0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00],
[0x00,0x04,0x02,0x01,0x02,0x04,0x00,0x00],
[0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00],
[0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00],
[0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00],
[0x00,0x7F,0x48,0x44,0x44,0x38,0x00,0x00],
[0x00,0x38,0x44,0x44,0x28,0x00,0x00,0x00],
[0x00,0x38,0x44,0x44,0x48,0x7F,0x00,0x00],
[0x00,0x38,0x54,0x54,0x54,0x18,0x00,0x00],
[0x00,0x08,0x7E,0x09,0x02,0x00,0x00,0x00],
[0x00,0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00],
[0x00,0x7F,0x08,0x04,0x04,0x78,0x00,0x00],
[0x00,0x00,0x7D,0x00,0x00,0x00,0x00,0x00],
[0x00,0x80,0x84,0x7D,0x00,0x00,0x00,0x00],
[0x00,0x7F,0x10,0x28,0x44,0x00,0x00,0x00],
[0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00],
[0x00,0x7C,0x04,0x18,0x04,0x78,0x00,0x00],
[0x00,0x7C,0x08,0x04,0x7C,0x00,0x00,0x00],
[0x00,0x38,0x44,0x44,0x38,0x00,0x00,0x00],
[0x00,0xFC,0x24,0x24,0x18,0x00,0x00,0x00],
[0x00,0x18,0x24,0x24,0xFC,0x00,0x00,0x00],
[0x00,0x00,0x7C,0x08,0x04,0x00,0x00,0x00],
[0x00,0x48,0x54,0x54,0x24,0x00,0x00,0x00],
[0x00,0x04,0x7F,0x44,0x00,0x00,0x00,0x00],
[0x00,0x3C,0x40,0x40,0x7C,0x00,0x00,0x00],
[0x00,0x1C,0x20,0x40,0x20,0x1C,0x00,0x00],
[0x00,0x3C,0x40,0x30,0x40,0x3C,0x00,0x00],
[0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00],
[0x00,0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00],
[0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00],
[0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00],
[0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00],
[0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00],
[0x00,0x02,0x01,0x01,0x02,0x01,0x00,0x00],
[0x00,0x02,0x05,0x05,0x02,0x00,0x00,0x00]]

bus = smbus.SMBus(1)
cmd_mod = 0x80
dat_mod = 0x40
def send(addr, mode, data):

    bus.write_i2c_block_data(addr, mode, data)

def init(ADDRESS):
    send(ADDRESS, cmd_mod, [0xae])
    send(ADDRESS, cmd_mod, [0xd5])
    send(ADDRESS, cmd_mod, [0x50])
    send(ADDRESS, cmd_mod, [0x20])
    send(ADDRESS, cmd_mod, [0x81])
    send(ADDRESS, cmd_mod, [0x80])
    send(ADDRESS, cmd_mod, [0xa0])
    send(ADDRESS, cmd_mod, [0xa4])
    send(ADDRESS, cmd_mod, [0xa6])
    send(ADDRESS, cmd_mod, [0xad])
    send(ADDRESS, cmd_mod, [0x80])
    send(ADDRESS, cmd_mod, [0xc0])
    send(ADDRESS, cmd_mod, [0xd9])
    send(ADDRESS, cmd_mod, [0x1f])
    send(ADDRESS, cmd_mod, [0xdb])
    send(ADDRESS, cmd_mod, [0x27])
    send(ADDRESS, cmd_mod, [0xaf])
    send(ADDRESS, cmd_mod, [0xb0])
    send(ADDRESS, cmd_mod, [0x00])
    send(ADDRESS, cmd_mod, [0x11])

def clearDisplay():
    for j in range (0,16):
        send(0x3c, cmd_mod, [0xb0 + j])
        send(0x3c, cmd_mod, [0x0])
        send(0x3c, cmd_mod, [0x10])
        for i in range (0,128):
            send(0x3c, dat_mod, [0x00])

def putchar(char):
    char_int = ord(char)
    for i in range(0,8):
        send(0x3c,dat_mod,[BasicFont[char_int-32][i]])

def putstring(chars):
    for i in range(len(chars)):
        putchar(chars[i])

def settextpos(row,col):
    column = 0x08 if col%2 else 0x00
    send(0x3c,cmd_mod,[0xb0+row])
    send(0x3c,cmd_mod,[column])
    send(0x3c,cmd_mod,[int(0x11 + col/2)])

def send_data(rounded_real_solar_voltage, rounded_real_bat_voltage):
    if os.path.isdir('/media/pi/KINGSTON'):        
        file = open("/media/pi/KINGSTON/data_log.csv", "a")
        i=0
        if os.stat("/media/pi/KINGSTON/data_log.csv").st_size == 0:
            file.write('Time, Solar voltage, Battery voltage\n')

        i=i+1
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S') #removes unnecessary decimals
        file.write(str(now)+","+str(rounded_real_solar_voltage)+","+str(rounded_real_bat_voltage)+"\n")
        file.flush()
        print ("Data successfully sent to USB \n")
        file.close()
        time.sleep(5) #wait for some seconds
    else:
        print ("No USB connected \n")
        time.sleep(1)
        
def display_data(rounded_real_solar_voltage, rounded_real_bat_voltage):
    
    print ("Measured voltage over solar cell:", rounded_real_solar_voltage, "V") # prints the  current voltage in the terminal
    print ("Measured voltage over battery:", rounded_real_bat_voltage , "V")
    print ("battery bits:", s2)
    
    settextpos(2, 3)
    putstring((rounded_real_solar_voltage))
    settextpos(7, 3)
    putstring((rounded_real_bat_voltage))

def low_voltage(s2, rounded_real_solar_voltage, rounded_real_bat_voltage):
    if s2 < 400:
        send_data(rounded_real_solar_voltage, rounded_real_bat_voltage)
        subprocess.call(['sudo','shutdown','-t','0'])

init(0x3c)
clearDisplay()

settextpos(0, 0)
putstring(str("Solar Voltage"))
settextpos(1, 0)
putstring(str("-------------"))
settextpos(2, 9)
putstring(str("V"))

settextpos(5, -1)
putstring(str("Battery Voltage"))
settextpos(6, -1)
putstring(str("---------------"))
settextpos(7, 9)
putstring(str("V"))

#from time import sleep #to create delays
from datetime import datetime

ser = serial.Serial('/dev/ttyACM0',9600)

while True:

    str1 = ser.readline()  # read a string from the serial port
    time.sleep(0.1)
    str2 = ser.readline()
    
    s = float(str1)    # convert a string to a floating point number
    s2 = float(str2)
    
    solar_voltage = 5 * 11.5 * s / 1023 #scales the analog input voltage
    bat_voltage = 5.1 * s2 / 1023
    #bat_bits = s2 #number of bits from LBO
    rounded_real_solar_voltage = ("%.3f" % round (solar_voltage,3)) #rounds the voltage
    rounded_real_bat_voltage = ("%.3f" % round (bat_voltage,3))
    
    
    
    low_voltage(s2, rounded_real_solar_voltage, rounded_real_bat_voltage)
    display_data(rounded_real_solar_voltage, rounded_real_bat_voltage)
    send_data(rounded_real_solar_voltage, rounded_real_bat_voltage)
        
file.close()


    
    
    
    
    
    